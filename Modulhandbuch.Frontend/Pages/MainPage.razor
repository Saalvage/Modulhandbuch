@page "/"
@using System.Text.Json
@using System.Text.RegularExpressions
@using Modulhandbuch.Frontend.Components
@using global::Modulhandbuch.Shared
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel
@using System.Reflection
@using Module = Modulhandbuch.Shared.Module
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Modulhandbuch</PageTitle>

<div class="form-check form-switch next-to-right" style="margin-right: 50pt">
    <InputCheckbox @bind-Value="@Bachelor" class="form-check-input" type="checkbox" role="switch" id="bachelortoggle"/>
    <label class="form-check-label" for="bachelortoggle">Bachelormodule</label>
</div>
<div class="form-check form-switch">
    <InputCheckbox @bind-Value="@Master" class="form-check-input" type="checkbox" role="switch" id="mastertoggle"/>
    <label class="form-check-label" for="mastertoggle">Mastermodule</label>
</div>

<div class="form-group" style="margin-bottom: 5px">
    <InputText @bind-Value="@Search" @oninput="x => Search = x.Value.ToString()" placeholder="Suchtext (unterstützt Regex!)"
               class="form-control next-to-right" style="width: 20rem" />
    <InputText @bind-Value="@Credits" placeholder="ECTS" class="form-control" style="width: 5rem" />
</div>

<div class="form-group">
    <InputText @bind-Value="@InId" placeholder="z.B. INFO" class="form-control next-to-right" style="width: 10rem" />
    <InputSelect @bind-Value="@Turn" class="form-select" style="width: 15rem">
        <option value="">Alle</option>
        @foreach (var turnus in Enum.GetValues(typeof(Turnus))) {
            <option value="@turnus">@TurnusToString((Turnus)turnus)</option>
        }
    </InputSelect>
</div>

@if (_bachelorModules == null || _masterModules == null) {
    <p><em>Laden...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>ID</th>
                <th>Leistungspunkte</th>
                <th>Turnus</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var module in GetDisplayedModules()) {
                <tr>
                    <td>
                        <i class="bi bi-question-circle module-info"
                           @onclick="async () => await _popup.Show(NewlinesToParagraphs(module.Description), module.Name)">
                        </i>
                        @module.Name
                    </td>
                    <td>@module.Id</td>
                    <td>@module.Credits LP</td>
                    <td>@TurnusToString(module.Turnus)</td>
                </tr>
            }
        </tbody>
    </table>
}

<div style="text-align: center">
    <p style="font-size: 12px; margin-bottom: 2px">Es besteht keinerlei Verbindung zum KIT.</p>
    <p style="font-size: 10px; margin-bottom: 2px">Alle Angaben ohne Gewehr.</p>
    <p style="font-size: 8px; margin-bottom: 2px">Zu Risiken und Nebenwirkungen lesen Sie das README und fragen Sie Ihren Maintainer oder Contributor.</p>
</div>

<Popup @ref="_popup"/>

@code {
    private Popup _popup;

    public bool Bachelor { get; set; } = true;
    public bool Master { get; set; } = true;

    public string Search { get; set; } = "";
    public string Credits { get; set; } = "";

    public string InId { get; set; } = "";

    public Turnus? Turn { get; set; }

    private Module[]? _bachelorModules;
    private Module[]? _masterModules;

    private readonly Dictionary<PropertyInfo, object?> _defaults = new();

    protected override void OnInitialized() {
        var dic = QueryHelpers.ParseQuery(NavManager.ToAbsoluteUri(NavManager.Uri).Query);
        foreach (var p in GetType().GetProperties()) {
            _defaults.Add(p, p.GetValue(this));

            if (dic.TryGetValue(p.Name, out var val) && val.Count == 1) {
                var converter = TypeDescriptor.GetConverter(p.PropertyType);
                if (!converter.IsValid(val[0]!)) {
                    continue;
                }

                p.SetValue(this, converter.ConvertFromString(val[0]!));
            }
        }
    }

    protected override void OnAfterRender(bool firstRender) {
        var dic = new Dictionary<string, string>();
        foreach (var p in GetType().GetProperties()) {
            if (!p.GetValue(this)?.Equals(_defaults[p]) ?? _defaults[p] != null) {
                dic.Add(p.Name.ToLowerInvariant(), p.GetValue(this)?.ToString() ?? "");
            }
        }

        var newUri = QueryHelpers.AddQueryString(NavManager.ToAbsoluteUri(NavManager.Uri).AbsolutePath, dic);
        NavManager.NavigateTo(newUri, false, true);
    }

    private IEnumerable<Module> GetDisplayedModules() {
        var enumerable = Enumerable.Empty<Module>();
        if (Bachelor) {
            enumerable = enumerable.Concat(_bachelorModules);
        }
        if (Master) {
            enumerable = enumerable.Concat(_masterModules);
        }

        if (int.TryParse(Credits, out var creditValue)) {
            enumerable = enumerable.Where(x => x.Credits == creditValue);
        }

        if (!string.IsNullOrEmpty(InId)) {
            enumerable = enumerable.Where(x => x.Id.Contains(InId));
        }

        if (!string.IsNullOrEmpty(Search)) {
            var regex = new Regex(Search, RegexOptions.IgnoreCase);
            enumerable = enumerable.Where(x => regex.IsMatch(x.Name));
        }

        if (Turn.HasValue) {
            enumerable = enumerable.Where(x => x.Turnus == Turn.Value);
        }

        return enumerable.DistinctBy(x => x.Id);
    }

    protected override async Task OnInitializedAsync() {
        var data = await Task.WhenAll(new[] { "bachelor.json", "master.json" }
            .Select(async x => await JsonSerializer.DeserializeAsync<Module[]>(await Http.GetStreamAsync(x), SerializerOptions.Default)));
        _bachelorModules = data[0];
        _masterModules = data[1];
    }

    private static string TurnusToString(Turnus turnus)
        => turnus switch {
            Turnus.EverySemester => "Jedes Semester",
            Turnus.EverySummerSemester => "Jedes Sommersemester",
            Turnus.EveryWinterSemester => "Jedes Wintersemester",
            Turnus.Irregular => "Unregelmäßig",
            Turnus.OneTime => "Einmalig",
            Turnus.Yearly => "Jährlich",
            Turnus.SeeNotes => "Siehe Notizen",
        };

    private static string NewlinesToParagraphs(string input)
        => "<p>" + input.Replace("\n", "</p><p>") + "</p>";

}
